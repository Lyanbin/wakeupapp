(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('mobile-useragent-parse')) :
    typeof define === 'function' && define.amd ? define(['mobile-useragent-parse'], factory) :
    (global.wakeupapp = factory(global.Ua));
}(this, (function (Ua) { 'use strict';

    Ua = Ua && Ua.hasOwnProperty('default') ? Ua['default'] : Ua;

    var Config = {
        androidSchema: {},
        iosSchema: {},
        defaultDownloadUrl: '',
        yingyongbaoUrl: '',

        androidDeviceAppStore: {}

    };

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    /**
     * 
     * 
     * 原始的参数为这些：
     * app = {
     *      locate: 'bottom_layer',                             // 导流条位置，必填
     *      page: page,                                         // 有默认，可覆盖
     *      param: {                                            // frs和pb的id，必填，否则进入的是首页
     *          threadId: opts.tid
     *      },
     *      callManufacturer: opts.manufacturerConfig.switch,   // 是否调起厂商
     *      ios9DownUrl: ios9DownUrl,                           // 有默认，可覆盖
     *      iosDownUrl: iosDownUrl,                             // 有默认，可覆盖
     *      androidDownUrl: androidDownUrl,                     // 有默认，可覆盖
     *      from: 'bpush',                                      // 统计参数，大部分都是bpush
     
     *      task: 'H5导流',                                      // h5统计参数，目前没用
     *      isSearch: sessionStorage.getItem('isSearch'),       // h5统计参数，目前没用
     *      searchType: sessionStorage.getItem('pageSource'),   // h5统计参数，目前没用
     *      isLogin: opts.is_login === '1' ? '1' : '0',         // h5统计参数，目前没用
     *      
     *      manufacturer: UaDevice.device.manufacturer,         // 目前没用
     *      obj_source: document.referrer,                      // 目前没用
     *      obj_param2: UaDevice.browser.name                   // 目前没用
     * };
     * 
     * 
     * 目前的参数需要这些，考虑到下载中间页的设计，可以用fr进行映射，后续downloadUrl也没必要传
     * app = {
     *      locate: '',                 // 导流的名字
     *      page: '',                   // 页面名字，pb，frs，index
     *      param: {
     *          tid: '',                // 帖子id
     *          kw: '',                 // 吧名字
     *      },
     *      noDownload: false,          // 是否下载
     *      callManufacturer: false,    // 是否需要调起厂商的应用商店
     *      ios9DownUrl: ''             // ios9的调起参数fr=？
     *      iosDownUrl: ''              // ios的下载链接
     *      androidDownUrl: ''          // android的下载链接
     *      from: 'bpush',              // 统计参数，大部分都是bpush
     * }
     */

    var WakeUpApp = function () {
        function WakeUpApp() {
            _classCallCheck(this, WakeUpApp);

            this.os = Ua.os.name;
            this.osVersion = parseFloat(Ua.os.version);
            this.browser = Ua.browser.name;
            this.device = Ua.device.name;
        }
        /**
         * 判断ua，进入对应的调起函数
         */

        _createClass(WakeUpApp, [{
            key: 'init',
            value: function init() {
                var userConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                // 合并下用户输入的配置
                this.config = Object.assign({}, Config, userConfig);
                var bdidReg = document.cookie.match(/\bBAIDUID=([A-Z0-9]+)/);
                this.bdid = bdidReg ? bdidReg[1] : '';
                this.config.obj_source = this.getReferSource(document.referrer);
                if (!userConfig.page) {
                    this.config.page = this.getPage();
                }
                if (this.browser === 'weixin') {
                    this.yingyongbaoOpen();
                } else if (this.os === 'ios' && this.osVersion >= 9) {
                    this.universalLinkOpen();
                } else {
                    this.schemaOpen();
                }
            }
            /** 
             * android和ios9以下通过schema调起
             */

        }, {
            key: 'schemaOpen',
            value: function schemaOpen() {
                var isAndroid = this.os === 'android';
                var url = void 0;
                if (isAndroid) {
                    url = this.getAndroidSchemaUrl();
                    this.callManufacturer();
                } else {
                    url = this.getIosSchemaUrl();
                }
                this.iframeOpen(url, 'tiebaCallAppIframe');
                this.callDownLoad(isAndroid);
            }
            /** 
             * ios9以上通过universalLink调起
             */

        }, {
            key: 'universalLinkOpen',
            value: function universalLinkOpen() {
                if (!this.config.ios9DownUrl) {
                    return;
                }
                var host = 'https://bbs.baidu.com';
                var urlPath = '/mo/q/activityDiversion/download?';
                if (this.config.page === 'pb' && this.config.param.tid) {
                    urlPath = '/p/' + this.config.param.tid + '?';
                } else if (this.config.page === 'frs' && this.config.param.kw) {
                    urlPath = '/f?kw=' + this.config.param.kw + '&';
                }
                var ownStatParam = 'obj_locate=' + this.config.locate + '&obj_source=' + this.config.obj_source + '&obj_param2=' + this.browser + '&bdid=' + this.bdid;
                var otherParamStr = this.config.ios9DownUrl + '&' + ownStatParam;
                // if (location.host === 'tieba.baidu.com') {
                //     host = 'https://wapp.baidu.com';
                // }
                location.href = '' + host + (urlPath || '?') + otherParamStr;
            }

            /**
             * 假如给定url，则该方法转换链接
             */

        }, {
            key: 'getUniversalLink',
            value: function getUniversalLink(targetUrl) {
                var httpReg = /^(?:http|https):/;
                if (!httpReg.test(targetUrl)) {
                    targetUrl = 'https://' + targetUrl;
                }
                var reg = /^(?:http|https):\/\/tieba\.baidu\.com/;
                var newUrl = '';
                if (reg.test(targetUrl)) {
                    newUrl = targetUrl.replace(reg, 'https://bbs.baidu.com');
                } else {
                    newUrl = targetUrl.replace(/^(?:http|https):\/\/[a-z.]+?\.baidu\.com/, 'https://tieba.baidu.com');
                }
                var bdidReg = document.cookie.match(/\bBAIDUID=([A-Z0-9]+)/);
                var bdid = bdidReg ? bdidReg[1] : '';
                newUrl = newUrl.indexOf('?') > -1 ? newUrl + '&bdid=' + bdid : newUrl + '?bdid=' + bdid;
                return newUrl;
            }
            /**
             * 如果在微信里就来应用宝
             */

        }, {
            key: 'yingyongbaoOpen',
            value: function yingyongbaoOpen() {
                location.href = this.config.yingyongbaoUrl;
            }
        }, {
            key: 'getReferSource',
            value: function getReferSource(refer) {
                var source = 'other';
                switch (refer) {
                    case '':
                        source = 'no_refer';
                        break;
                    case refer.indexOf('m.baidu.com') > -1 || refer.indexOf('www.baidu.com') > -1:
                        source = 'baidu';
                        break;
                    case refer.indexOf('sogou.com') > -1:
                        source = 'sogou';
                        break;
                    case refer.indexOf('m.sm.cn') > -1:
                        source = 'shenma';
                        break;
                    case refer.indexOf('bing.com') > -1:
                        source = 'bing';
                        break;
                    case refer.indexOf('google.com') > -1:
                        source = 'google';
                        break;
                    case refer.indexOf('youdao.com') > -1:
                        source = 'youdao';
                        break;
                    case refer.indexOf('so.com') > -1:
                        source = '360';
                        break;
                }
                return source;
            }
        }, {
            key: 'getPage',
            value: function getPage() {
                var pathname = location.pathname;
                var search = location.search;
                if (pathname === '/') {
                    return 'index';
                } else if (pathname === '/f') {
                    return 'frs';
                } else if (/\/p\/\d+/.test(pathname)) {
                    if (~search.indexOf('fr=share')) {
                        return 'pbshare';
                    } else {
                        return 'pb';
                    }
                }
                return 'index';
            }
        }, {
            key: 'getAndroidSchemaUrl',
            value: function getAndroidSchemaUrl() {
                var map = this.config.androidSchema;
                var protocol = map[this.config.page].protocol;
                var path = map[this.config.page].path;
                var param = _typeof(this.config.param) === 'object' ? this.config.param : {};
                var paramStr = '';
                for (var key in param) {
                    paramStr += key + '=' + param[key] + '&';
                }

                paramStr = 'obj_locate=' + this.config.locate + '&obj_source=' + this.config.obj_source + '&obj_param2=' + this.browser + '&bdid=' + this.bdid + '&fr=' + this.config.from + '&' + paramStr;
                var url = protocol + '://' + path + '//' + paramStr;
                return url;
            }
        }, {
            key: 'getIosSchemaUrl',
            value: function getIosSchemaUrl() {
                var map = this.config.iosSchema;
                var protocol = map[this.config.page].protocol;
                var path = map[this.config.page].path;
                var param = _typeof(this.config.param) === 'object' ? this.config.param : {};
                var paramStr = '';
                for (var key in param) {
                    paramStr += key + '=' + param[key] + '&';
                }
                paramStr = paramStr + '&fr=' + this.config.from + '&obj_locate=' + this.config.locate + '&obj_source=' + this.config.obj_source + '&obj_param2=' + this.browser + '&bdid=' + this.bdid;
                return url = protocol + '://' + path + '?' + paramStr;
            }
        }, {
            key: 'callManufacturer',
            value: function callManufacturer() {
                var _this = this;

                var androidAppStoreSchema = this.config.androidDeviceAppStore[this.device];
                if (this.config.callManufacturer && androidAppStoreSchema) {
                    setTimeout(function () {
                        _this.iframeOpen(androidAppStoreSchema, 'tiebaCallAppStore');
                    }, 500);
                }
            }
        }, {
            key: 'callDownLoad',
            value: function callDownLoad(isAndroid) {
                if (!this.config.noDownload) {
                    var _url = this.config.iosDownUrl || this.config.defaultDownloadUrl;
                    if (isAndroid) {
                        _url = this.config.androidDownUrl || this.config.defaultDownloadUrl;
                    }
                    if (_url) {
                        setTimeout(function () {
                            location.href = _url;
                        }, 1500);
                    }
                }
            }
        }, {
            key: 'iframeOpen',
            value: function iframeOpen(url, nodeId) {
                if (!url) {
                    return;
                }
                var rawNode = document.querySelector('#' + nodeId);
                var body = document.body;
                if (rawNode) {
                    body.removeChild(rawNode);
                }
                var node = document.createElement('iframe');
                node.id = nodeId;
                node.style.display = 'none';
                node.src = url;
                body.appendChild(node);
            }
        }]);

        return WakeUpApp;
    }();

    var wakeUpApp = new WekeUpApp();

    return wakeUpApp;

})));
